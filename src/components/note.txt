// const search = async (city, lat = null, lon = null) => {
//     if (lat && lon) {
//         // Fetch weather data using coordinates
//         const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${import.meta.env.VITE_APP_ID}`;
//         try {
//             const response = await fetch(url);
//             const data = await response.json();
//             updateWeatherData(data);
//         } catch (error) {
//             console.error("Error fetching weather data:", error);
//         }
//     } else if (city) {
//         // Fetch weather data using city name
//         if (city.trim() === "") {
//             alert("Enter City Name");
//             return;
//         }
//         const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${import.meta.env.VITE_APP_ID}`;
//         try {
//             const response = await fetch(url);
//             const data = await response.json();
//             updateWeatherData(data);
//         } catch (error) {
//             console.error("Error fetching weather data:", error);
//         }
//     }
// };

// const updateWeatherData = (data) => {
//     const icon = allIcons[data.weather[0].icon] || clear_icon;
//     const countryCode = data.sys.country;
//     const countryDetails = getCountryInfo(countryCode);
//     const flagURL = getFlagURL(countryCode);
//     setWeatherData({
//         humidity: data.main.humidity,
//         windSpeed: data.wind.speed,
//         temp: Math.floor(data.main.temp),
//         pressure: data.main.sea_level ? Math.floor(data.main.sea_level) : 'N/A',
//         country: countryDetails.name || countryCode,
//         continent: countryDetails.continent,
//         flag: flagURL,
//         location: data.name,
//         des: data.weather[0].description,
//         visibility: data.visibility / 1000,
//         sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),
//         icon: icon
//     });
// };

// useEffect(() => {
//     const fetchCurrentLocation = () => {
//         if (navigator.geolocation) {
//             navigator.geolocation.getCurrentPosition((position) => {
//                 const { latitude, longitude } = position.coords;
//                 search(null, latitude, longitude);
//             }, (error) => {
//                 console.error("Error getting location:", error);
//                 search("Kolkata");
//             });
//         } else {
//             console.error("Geolocation is not supported by this browser.");
//             search("Kolkata");
//         }
//     };
//     fetchCurrentLocation();
// }, []);









const prompt = `Act as an expert business analyst, economic strategist, and travel consultant. Analyze the following real-time weather data:  
${JSON.stringify(weatherData, null, 2)}.  

### **1. Business Insights:**  
   - Predict how current weather conditions (temperature, humidity, wind, precipitation) affect **different business sectors** (e.g., retail, agriculture, logistics, hospitality).  
   - Identify **economic impacts**, such as how the weather might influence **consumer behavior, sales, supply chain disruptions, or service demands**.  
   - Provide **data-driven recommendations** for businesses to adapt, such as:  
     - **Retail:** Stocking seasonal products or adjusting pricing.  
     - **Agriculture:** Crop protection strategies or irrigation adjustments.  
     - **Transportation & Logistics:** Adapting delivery schedules for efficiency.  
     - **Hospitality & Tourism:** Adjusting promotions based on climate trends.  
   - Highlight **emerging business trends** that may arise due to the current weather conditions (e.g., increased demand for winter gear, summer beverages, or indoor activities).  
   - Offer **strategies for seasonal adaptation** to help businesses prepare for the upcoming weather shifts.  

### **2. Travel Insights:**  
   - Assess how current weather conditions affect **transportation, tourism, and outdoor activities**.  
   - Recommend **three locations within the country** that are ideal for a **two-day trip** based on the weather.  
     - For each location:  
       - Suggest **top tourist attractions** that align with the weather (e.g., indoor museums for rainy days, beaches for sunny weather).  
       - Provide **customized travel itineraries**, including ideal activities for different traveler types (e.g., solo travelers, families, adventure seekers).  
       - Include **local seasonal specialties** (e.g., must-try foods, cultural events, festivals).  
   - Offer **realistic budgeting tips** for each location, considering factors like transportation costs, accommodation pricing, and local expenses.  
   - Provide **safety tips**, including:  
     - Health precautions for extreme temperatures (e.g., hydration strategies for heatwaves, layering tips for cold weather).  
     - Best times for safe travel (avoiding storms, floods, road closures).  
     - Emergency contacts or services to be aware of.  
   - Suggest **eco-friendly travel tips**, ensuring responsible tourism with minimal environmental impact.  


### **3. Food & Nutrition Insights:**  
   - Based on the weather and location, suggest **dietary habits** that suit the climate.  
   - Recommend **seasonal vegetables, fruits, and food types** that are ideal for the given weather conditions.  
     - **For hot weather:** Cooling foods like watermelon, cucumbers, citrus fruits, coconut water, and light meals.  
     - **For cold weather:** Warming foods like root vegetables, nuts, protein-rich meals, and herbal teas.  
     - **For humid/rainy conditions:** Immune-boosting foods like ginger, turmeric, leafy greens, and probiotics.  
   - Advise on **cooking methods** that align with the climate (e.g., grilled and fresh foods for summer, warm stews for winter).  
   - Suggest **hydration strategies** for extreme temperatures.  

### **4. Agriculture & Farming Insights:**  
   - Evaluate how the current weather conditions affect **crop growth, soil quality, and livestock health**.  
   - Recommend **weather-resilient crops** that farmers should prioritize based on temperature, humidity, and precipitation.  
   - Provide **adaptive farming techniques** such as:  
     - **Drought Conditions:** Drip irrigation, mulching, drought-resistant crops (e.g., millets, sorghum).  
     - **Excess Rainfall:** Raised-bed farming, improved drainage systems, flood-resistant crops (e.g., paddy, sugarcane).  
     - **Cold Weather:** Greenhouse farming, heat-retaining soil techniques, cold-tolerant crops (e.g., cabbage, carrots).  
   - Suggest **pest and disease control strategies** relevant to the weather conditions.  
   - Provide **market insights** on which crops are expected to be in high demand due to the seasonal impact on supply chains.  




Ensure all insights are **realistic, location-specific, data-driven, and actionable** to provide practical value for businesses and travelers alike.`;

 // "01d": clear_icon,  // Sunny (Day)
        // "01n": clear_night_icon, // Clear Night
        // "02d": cloud_icon,  // Few Clouds (Day)
        // "02n": cloud_night_icon, // Few Clouds (Night)
        // "03d": cloud_icon,  // Scattered Clouds
        // "03n": cloud_night_icon,
        // "04d": drizzle_icon,  // Broken Clouds
        // "04n": drizzle_night_icon,
        // "09d": drizzle_icon,  // Shower Rain
        // "09n": rain_night_icon,
        // "10d": rain_icon,  // Rain (Day)
        // "10n": rain_night_icon, // Rain (Night)
        // "11d": thunderstorm_icon,  // Thunderstorm
        // "11n": thunderstorm_night_icon,
        // "13d": snow_icon,  // Snow
        // "13n": snow_night_icon
        // ,
        // "50d": mist_icon,  // Mist
        // "50n": mist_night_icon,





import React, { useEffect, useRef, useState } from 'react';
import "./Weather.css";
import search_icon from "../assets/search.png";
import clear_icon from "../assets/clear.png";
import cloud_icon from "../assets/cloud.png";
import drizzle_icon from "../assets/drizzle.png";
import rain_icon from "../assets/rain.png";
import snow_icon from "../assets/snow.png";
import wind_icon from "../assets/wind.png";
import wind_pressure_icon from "../assets/windpressure.png";
import humidity_icon from "../assets/humidity.png";
import visibility_icon from "../assets/visibility.png";
import sunrise_icon from "../assets/sunrise.png";
import sealevel_icon from "../assets/sealevel.png";
import countryList from "../api/countryList.json";

// Import weather images
import clearImg from "../assets/clear-sky.jpg";
import cloudImg from "../assets/cloudy.jpg";
import drizzleImg from "../assets/foggy.jpg";
import rainImg from "../assets/rain.jpg";
import snowImg from "../assets/snow.jpg";
import defaultImg from "../assets/default.jpg";

// Weather images mapping
const weatherImages = {
    "clear": clearImg,
    "clouds": cloudImg,
    "drizzle": drizzleImg,
    "rain": rainImg,
    "snow": snowImg,
    "default": defaultImg
};

const Weather = () => {
    const inputRef = useRef();
    const [weatherData, setWeatherData] = useState(null);

    const allIcons = {
        "01d": clear_icon,
        "01n": clear_icon,
        "02d": cloud_icon,
        "02n": cloud_icon,
        "03d": cloud_icon,
        "03n": cloud_icon,
        "04d": drizzle_icon,
        "04n": drizzle_icon,
        "09d": drizzle_icon,
        "09n": rain_icon,
        "10d": rain_icon,
        "10n": rain_icon,
        "13d": snow_icon,
        "13n": snow_icon,
    };

    const getCountryInfo = (countryCode) => {
        return countryList[countryCode] || { name: 'Unknown Country', countryCode: 'unknown', continent: 'unknown', population: 'unknown' };
    };

    const getFlagURL = (countryCode) => {
        try {
            const url = `https://flagcdn.com/w320/${countryCode.toLowerCase()}.png`;
            return url;
        } catch (error) {
            console.error("Error fetching Location data:", error);
        } 
    };

    const search = async (city) => {
        if (city === "") {
            alert("Enter City Name");
            return;
        }
        try {
            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${import.meta.env.VITE_APP_ID}`;
            const response = await fetch(url);
            const data = await response.json();
            console.log(data);

            const icon = allIcons[data.weather[0].icon] || clear_icon;
            const countryCode = data.sys.country;
            const countryDetails = getCountryInfo(countryCode);
            const flagURL = getFlagURL(countryCode);

            // Determine background image based on weather description
            const weatherDesc = data.weather[0].main.toLowerCase();
            const background = weatherImages[weatherDesc] || weatherImages.default;

            // Set the background image of the body
            document.body.style.backgroundImage = `url(${background})`;
            document.body.style.backgroundSize = 'cover'; // Ensure the image covers the background
            document.body.style.backgroundPosition = 'center'; // Center the image

            setWeatherData({
                humidity: data.main.humidity,
                windSpeed: data.wind.speed,
                temp: Math.floor(data.main.temp),
                pressure: data.main.sea_level ? Math.floor(data.main.sea_level) : 'N/A',
                country: countryDetails.name || countryCode,
                continent: countryDetails.continent,
                flag: flagURL,
                location: data.name,
                des: data.weather[0].description,
                visibility: data.visibility / 1000,  
                sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),  
                icon: icon
            });
        } catch (error) {
            console.error("Error fetching weather data:", error);
        }
    };

    useEffect(() => {
        search("Kolkata");
        return () => {
            // Reset background when component unmounts
            document.body.style.backgroundImage = `url(${weatherImages.default})`;
            document.body.style.backgroundSize = 'cover';
            document.body.style.backgroundPosition = 'center';
        };
    }, []);

    return (
        <div className='weather'>
            <div className="search_bar">
                <input type="text" ref={inputRef} placeholder='Search' />
                <img src={search_icon} alt="search" onClick={() => search(inputRef.current.value)} />
            </div>
            {weatherData ? (
                <>
                    <img src={weatherData.icon} alt="" className='weather_icon' />
                    <p className='temp'>{weatherData.temp}°C</p>
                    <div className="location">
                        <p>{weatherData.location}, <span>{weatherData.country}, {weatherData.continent}   <img src={weatherData.flag} alt={`${weatherData.country} flag`} className="flag_icon" /> </span></p>
                    </div>
                    <p className='location'>{weatherData.des.toUpperCase()}</p>
                    <div className="weather-data">
                        <div className="col">
                            <img src={humidity_icon} alt="humidity" />
                            <div>
                                <p>{weatherData.humidity} %</p>
                                <span>Humidity</span>
                            </div>
                        </div>
                        <div className="col">
                            <img src={wind_icon} alt="wind speed" />
                            <div>
                                <p>{weatherData.windSpeed} Km/h</p>
                                <span>Wind Speed</span>
                            </div>
                        </div>
                        <div className="col">
                            <img src={wind_pressure_icon} alt="pressure" />
                            <div>
                                <p>{weatherData.pressure} mb</p>
                                <span>Wind Pressure</span>
                            </div>
                        </div>
                        <div className="col">
                            <img src={sealevel_icon} alt="sea level" />
                            <div>
                                <p>{weatherData.pressure} MSL</p>
                                <span>Sea Level</span>
                            </div>
                        </div>
                        <div className="col">
                            <img src={visibility_icon} alt="visibility" />
                            <div>
                                <p>{weatherData.visibility} Km</p>
                                <span>Visibility</span>
                            </div>
                        </div>
                        <div className="col">
                            <img src={sunrise_icon} alt="sunrise" />
                            <div>
                                <p>{weatherData.sunrise}</p>
                                <span>Sunrise</span>
                            </div>
                        </div>
                    </div>
                </>
            ) : (
                <p>Loading...</p>
            )}
        </div>
    );
};

export default Weather;
